datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    discordId            String  @unique
    discordUsername      String
    discordDiscriminator String
    discordAvatarHash    String?

    languages Language[]

    rosters        Roster[]
    partyFindPosts PartyFindPost[]
    alarms         Alarm[]
}

enum Language {
    KR
    EN
}

model Region {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String @unique
    abbr      String @unique
    shortName String @unique

    servers Server[]
}

model Server {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String @unique

    region   Region @relation(fields: [regionId], references: [id])
    regionId String

    guilds         Guild[]
    partyFindPosts PartyFindPost[]
    rosters        Roster[]
}

model Guild {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    server   Server @relation(fields: [serverId], references: [id])
    serverId String

    characters Character[]

    @@unique([name, serverId])
}

model Roster {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    level      Int
    stronghold Stronghold?

    server   Server @relation(fields: [serverId], references: [id])
    serverId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    characters Character[]

    @@unique([serverId, userId])
}

model Stronghold {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name  String
    level Int

    roster   Roster @relation(fields: [rosterId], references: [id])
    rosterId String @unique
}

model Character {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String
    isPrimary Boolean
    job       Job

    onTimeBadge       Int
    friendlyBadge     Int
    professionalBadge Int

    combatLevel Int
    itemLevel   Float

    comment String

    crit           Int
    specialization Int
    domination     Int
    swiftness      Int
    endurance      Int
    expertise      Int

    roster   Roster @relation(fields: [rosterId], references: [id])
    rosterId String

    guild   Guild?  @relation(fields: [guildId], references: [id])
    guildId String?

    engravingSlots EngravingSlot[]
    applyStates    PartyFindApplyState[]

    @@unique([name, rosterId])
}

model Engraving {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn     String
    nameKo     String
    isPositive Boolean
    iconPath   String
    type       EngravingType
    job        Job?

    engravingSlots EngravingSlot[]
}

enum EngravingType {
    COMBAT
    CLASS
}

model EngravingSlot {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index Int
    level Int

    engraving   Engraving @relation(fields: [engravingId], references: [id])
    engravingId String

    character   Character @relation(fields: [characterId], references: [id])
    characterId String

    @@unique([characterId, index])
    @@unique([characterId, engravingId])
}

enum Job {
    DESTROYER
    GUNLANCER
    BERSERKER
    PALADIN

    STRIKER

    WARDANCER
    SCRAPPER
    SOULFIST
    GLAIVIER

    DEADEYE
    ARTILLERIST
    SHARPSHOOTER

    GUNSLINGER

    BARD
    ARCANIST
    SORCERESS

    DEATHBLADE
    SHADOWHUNTER
}

model ChaosDungeon {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn String
    nameKo String

    tabs ChaosDungeonTab[]
}

model ChaosDungeonTab {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String

    chaosDungeon   ChaosDungeon @relation(fields: [chaosDungeonId], references: [id])
    chaosDungeonId String

    stages ChaosDungeonStage[]

    @@unique([index, chaosDungeonId])
}

model ChaosDungeonStage {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String
    tier   Int
    level  Int

    chaosDungeonTab   ChaosDungeonTab @relation(fields: [chaosDungeonTabId], references: [id])
    chaosDungeonTabId String

    partyFindPosts PartyFindPost[]

    @@unique([index, chaosDungeonTabId])
}

model GuardianRaid {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn String
    nameKo String

    tabs GuardianRaidTab[]
}

model GuardianRaidTab {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String

    guardianRaid   GuardianRaid @relation(fields: [guardianRaidId], references: [id])
    guardianRaidId String

    stages GuardianRaidStage[]

    @@unique([index, guardianRaidId])
}

model GuardianRaidStage {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String
    tier   Int
    level  Int

    guardianRaidTab   GuardianRaidTab @relation(fields: [guardianRaidTabId], references: [id])
    guardianRaidTabId String

    partyFindPosts PartyFindPost[]

    @@unique([index, guardianRaidTabId])
}

model AbyssalDungeon {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn String
    nameKo String

    tabs AbyssalDungeonTab[]
}

model AbyssalDungeonTab {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index            Int
    nameEn           String
    nameKo           String
    difficultyNameEn String?
    difficultyNameKo String?

    abyssalDungeon   AbyssalDungeon @relation(fields: [abyssalDungeonId], references: [id])
    abyssalDungeonId String

    stages AbyssalDungeonStage[]

    @@unique([index, abyssalDungeonId])
}

model AbyssalDungeonStage {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index     Int
    nameEn    String
    nameKo    String
    tier      Int
    level     Int
    groupSize Int

    abyssalDungeonTab   AbyssalDungeonTab @relation(fields: [abyssalDungeonTabId], references: [id])
    abyssalDungeonTabId String

    partyFindPosts PartyFindPost[]

    @@unique([index, abyssalDungeonTabId])
}

model AbyssRaid {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn String
    nameKo String

    tabs AbyssRaidTab[]
}

model AbyssRaidTab {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String

    abyssRaid   AbyssRaid @relation(fields: [abyssRaidId], references: [id])
    abyssRaidId String

    stages AbyssRaidStage[]

    @@unique([index, abyssRaidId])
}

model AbyssRaidStage {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index  Int
    nameEn String
    nameKo String
    tier   Int
    level  Int

    abyssRaidTab   AbyssRaidTab @relation(fields: [abyssRaidTabId], references: [id])
    abyssRaidTabId String

    partyFindPosts PartyFindPost[]

    @@unique([index, abyssRaidTabId])
}

model LegionRaid {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    nameEn String
    nameKo String

    tabs LegionRaidTab[]
}

model LegionRaidTab {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index            Int
    nameEn           String
    nameKo           String
    difficultyNameEn String
    difficultyNameKo String

    legionRaid   LegionRaid @relation(fields: [legionRaidId], references: [id])
    legionRaidId String

    stages LegionRaidStage[]

    @@unique([index, legionRaidId])
}

model LegionRaidStage {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index     Int
    nameEn    String
    nameKo    String
    tier      Int
    level     Int
    groupSize Int

    legionRaidTab   LegionRaidTab @relation(fields: [legionRaidTabId], references: [id])
    legionRaidTabId String

    partyFindPosts PartyFindPost[]

    @@unique([index, legionRaidTabId])
}

model PartyFindPost {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    state           PartyFindPostState
    contentType     PartyFindContentType
    isPracticeParty Boolean
    isReclearParty  Boolean
    title           String
    startTime       DateTime
    recurring       Boolean

    chaosDungeon   ChaosDungeonStage? @relation(fields: [chaosDungeonId], references: [id])
    chaosDungeonId String?

    guardianRaid   GuardianRaidStage? @relation(fields: [guardianRaidId], references: [id])
    guardianRaidId String?

    abyssalDungeon   AbyssalDungeonStage? @relation(fields: [abyssalDungeonId], references: [id])
    abyssalDungeonId String?

    abyssRaid   AbyssRaidStage? @relation(fields: [abyssRaidId], references: [id])
    abyssRaidId String?

    legionRaid   LegionRaidStage? @relation(fields: [legionRaidId], references: [id])
    legionRaidId String?

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    server   Server @relation(fields: [serverId], references: [id])
    serverId String

    partyFindSlots PartyFindSlot[]
    applyStates    PartyFindApplyState[]
}

enum PartyFindPostState {
    RECRUITING
    FULL
    RERECRUITING
    EXPIRED
}

enum PartyFindContentType {
    CHAOS_DUNGEON
    GUARDIAN_RAID
    ABYSSAL_DUNGEON
    ABYSS_RAID
    LEGION_RAID
}

model PartyFindSlot {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    index   Int
    jobType JobType

    partyFindPost   PartyFindPost @relation(fields: [partyFindPostId], references: [id])
    partyFindPostId String

    partyFindApplyState PartyFindApplyState?

    @@unique([index, partyFindPostId])
}

enum JobType {
    DPS
    SUPPORT
    ANY
}

model PartyFindApplyState {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    state PartyFindApplyStateValue

    partyFindPost   PartyFindPost @relation(fields: [partyFindPostId], references: [id])
    partyFindPostId String

    partyFindSlot   PartyFindSlot? @relation(fields: [partyFindSlotId], references: [id])
    partyFindSlotId String?        @unique

    character   Character @relation(fields: [characterId], references: [id])
    characterId String

    @@unique([partyFindPostId, characterId])
}

enum PartyFindApplyStateValue {
    WAITING
    ACCEPTED
    REJECTED
    EXPIRED
}

model Alarm {
    id String @id @default(cuid())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message AlarmMessageType
    link    String
    isRead  Boolean

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

enum AlarmMessageType {
    PARTY_FIND_POST_SOMEONE_APPLIED
    PARTY_FIND_POST_RECRUIT_COMPLETE
    PARTY_FIND_POST_APPROVED
}
